datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Hardware {
    TLORA_V2
    TLORA_V1
    TLORA_V2_1_1p6
    TBEAM
    HELTEC_V2_0
    TBEAM0p7
    T_ECHO
    TLORA_V1_1p3
    RAK4631
    HELTEC_V2_1
    LORA_RELAY_V1
    NRF52840DK
    PPR
    GENIEBLOCKS
    NRF52_UNKNOWN
    PORTDUINO
    ANDROID_SIM
    DIY_V1
}

model Node {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    number    Int      @unique
    lastHeard DateTime

    position        Position?  @relation(name: "position", fields: [positionId], references: [id])
    positionId      String?
    user            User?      @relation(fields: [userId], references: [id])
    userId          String?    @unique
    positionHistory Position[] @relation(name: "positionHisotry")
    snr             SNR[]
    sent            Message[]  @relation(name: "sent")
    received        Message[]  @relation(name: "received")
    peer            Peer?      @relation(fields: [peerId], references: [id])
    peerId          String?


}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique
    longName  String
    shortName String
    mac       String
    hardware  Hardware

    node Node?
}

model SNR {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    snr       Float

    node   Node   @relation(fields: [nodeId], references: [id])
    nodeId String
}

model Position {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    latitude     Float?
    longitude    Float?
    altitude     Float?
    batteryLevel Int?

    node   Node    @relation(name: "positionHisotry", fields: [nodeId], references: [id])
    nodeId String
    Node   Node[]  @relation("position")
    peer   Peer?   @relation(fields: [peerId], references: [id])
    peerId String?
}

model Message {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    toUserId   String
    message    String
    packetId   Int      @unique
    fromUserId String

    from   Node    @relation(name: "sent", fields: [fromUserId], references: [id])
    to     Node    @relation(name: "received", fields: [toUserId], references: [id])
    peer   Peer?   @relation(fields: [peerId], references: [id])
    peerId String?
}

model Peer {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    ip        String
    psk       String

    nodes     Node[]
    messages  Message[]
    positions Position[]
}
